#include<bits/stdc++.h>
class Time{
private:
  int h;
  int m;
  int s;
public:
    Time(int h, int m, int s);
    Time(int h, int m);
    Time(int h);
    int hour() const;
    int minute() const;
    int second() const;
    void print();
    bool operator<(const Time& other) const;
    bool operator>(const Time& other) const;
    bool operator<=(const Time& other) const;
    bool operator>=(const Time& other) const;
    bool operator==(const Time& other) const;
    bool operator!=(const Time& other) const;
    friend ostream& operator << (ostream& os, const Time& t);
    
};

Time :: Time (int h_, int m_, int s_){
    h = h_;
    m = m_;
    s = s_;
    //Nếu mà số giây >60 thì trừ đi, mỗi lần trừ + 1 phút
    //Tương tự với phút và giờ (tuy nhiên giờ thì không có +1 ngày)
    while(s >= 60){
        s -= 60;
        m ++;
    }
    while(m >= 60){
        m -= 60;
        h ++;
    }
    while(h >= 24){
        h -= 24;
    }
}

Time :: Time(int h_, int m_){
    h = h_;
    m = m_;
    s = 0;
    while(m >= 60){
        m -= 60;
        h ++;
    }
    while(h >= 24){
        h -= 24;
    }
}

Time :: Time(int h_){
    h = h_;
    m = 0;
    s = 0;
    while(h >= 24){
        h -= 24;
    }
}
int Time::hour() const {
    return h;
}

int Time::minute() const {
    return m;
}

int Time::second() const {
    return s;
}

void Time :: print(){
    //Setfill là điền bù số 0 vào chỗ thừa
    //Set w là luôn để độ dài là 2
    cout << setfill('0') << setw(2) << h << ":"
    << setw(2) << m << ":" << setw(2) << s << endl;
}
bool Time::operator>(const Time& other) const {
    if (h != other.h) {
        return h > other.h;
    }
    if (m != other.m) {
        return m > other.m;
    }
    return s > other.s;
}

bool Time :: operator<(const Time& other) const {
    if (h != other.h) {
        return h < other.h;
    }
    if (m != other.m) {
        return m < other.m;
    }
    return s < other.s;
}

bool Time::operator<=(const Time& other) const
{
    if (h < other.h) {
        return true;
    } 
    else if (h == other.h) {
        if (m < other.m) {
            return true;
        } 
        else if (m == other.m) {
            if (s <= other.s) {
                return true;
            }
        }
    }
    return false;
}


bool Time::operator>=(const Time& other) const {
    if(h > other.h){
        return true;
    }
    else if(h == other.h){
        if(m > other.m){
            return true;
        }
        else if(m == other.m){
            if(s >= other.s){
                return true;
            }
        }
    }
    return false;
}

bool Time::operator==(const Time& other) const {
    return h == other.h && m == other.m && s == other.s;
}

bool Time::operator!=(const Time& other) const {
    if(h != other.h || m != other.m || s != other.s){
        return true;
    }
    return false;
}

ostream& operator<<(ostream& os, const Time& t) {
    os << setfill('0') << setw(2) << t.h << ":"
       << setfill('0') << setw(2) << t.m << ":"
       << setfill('0') << setw(2) << t.s;
    return os;
}
