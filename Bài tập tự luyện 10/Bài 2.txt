#include <iostream>
#include <vector>

using namespace std;

// Định nghĩa lớp đại diện cho các node trong danh sách liên kết đơn
class Node {
public:
    int data;
    Node* next;

    Node(int val) {
        data = val;
        next = NULL;
    }
};

// Hàm chèn phần tử x vào danh sách liên kết đơn tại vị trí k
Node* insertNode(Node* head, int k, int x) {
    Node* newNode = new Node(x);
    if (k == 0) {
        newNode->next = head;
        return newNode;
    } else {
        Node* cur = head;
        for (int i = 0; i < k - 1; i++) {
            cur = cur->next;
        }
        newNode->next = cur->next;
        cur->next = newNode;
        return head;
    }
}

// Hàm in các phần tử trong danh sách liên kết đơn từ vị trí k đến n-1, rồi từ vị trí 0 đến k-1
void printList(Node* head, int k, int n) {
    Node* cur = head;
    for (int i = 0; i < k; i++) {
        cur = cur->next;
    }
    for (int i = k; i < n; i++) {
        cout << cur->data << " ";
        cur = cur->next;
    }
    cur = head;
    for (int i = 0; i < k; i++) {
        cout << cur->data << " ";
        cur = cur->next;
    }
    cout << endl;
}


int main() {
    int n;
    cin >> n;
    vector<int> nums(n);
    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }
    // Tạo danh sách liên kết đơn
    Node* head = new Node(nums[0]);
    Node* tail = head;
    for (int i = 1; i < n; i++) {
        Node* newNode = new Node(nums[i]);
        tail->next = newNode;
        tail = newNode;
    }
    int k;
    cin >> k;
    // Kiểm tra tính hợp lệ của vị trí k
    if (k >= 0 && k < n) {
        printList(head, k, n);
    }
    else {
        cout << "Vi tri k khong hop le!" << endl;
    }

    return 0;
}
