class MyIntSet{
public:
    MyIntSet(){
        maxSize = 20;
        elements = new int [maxSize];
        num = 0;
    }
    MyIntSet(int a[], int n){
        maxSize = n;
        elements = new int[maxSize];
        num = 0;
        for(int i = 0; i < n; i++){
            insertVal(a[i]);
        }
    }
    ~MyIntSet(){
        delete[] elements;
    }
    bool insertVal(int v){
        if(findVal(v) == 1){
            return false;
        }
        if( num == maxSize){
            int* temp = new int [maxSize*2 +1];
            for(int i = 0; i < num ; i++){
                temp[i] = elements[i];
            }
            delete[] elements;
            elements = temp;
            maxSize = maxSize * 2 + 1;
        }
        elements[num] = v;
        num ++;
        return true;
        
    }
    bool eraseVal(int v){
        for(int i = 0; i < num; i++){
            if(elements[i] == v){
                for(int j = i + 1; j < num; j++){
                    elements[j-1] = elements[j];
                }
                num--;
                return true;
            }
        }
        return false;

    }
    void clearAll(){
        num = 0;
    }
    bool findVal(int v) const{
        for(int i = 0; i < num; i++){
            if(elements[i] == v){
                return true;
            }
        }
        return false;
    }
    
    bool isEmpty() const{
        if(num ==0){
            return true;
        }
        else{
            return false;
        }
    }
    int getSize() const{
        return num;
    }
    const int* getBeginPtr() const{
        return elements;
    }
    const int* getEndPtr() const{
        return elements + num -1;
    }
private:
    int maxSize;
    int* elements;
    int num;
};
